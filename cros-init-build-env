#!/bin/sh

# Build Environment Setup Script
#
# Copyright (C) 2006-2011 Linux Foundation
# Copyright (C) 2016-2017 Intel Corporation
#
# SPDX-License-Identifier: GPL-2.0-or-later

#
# Normally this is called as '. ./cros-init-build-env <builddir>'
#
# This works in most shells (not dash), but not all of them pass the arguments
# when being sourced.  To workaround the shell limitation use "set <builddir>"
# prior to sourcing this script.
#
if [ -n "$BASH_SOURCE" ]; then
    THIS_SCRIPT=$BASH_SOURCE
elif [ -n "$ZSH_NAME" ]; then
    THIS_SCRIPT=$0
else
    THIS_SCRIPT="$(find $(pwd) -name cros-init-build-env)"
fi
if [ -n "$BBSERVER" ]; then
    unset BBSERVER
fi

if [ -z "$ZSH_NAME" ] && [ "$0" = "$THIS_SCRIPT" ]; then
    echo "Error: This script needs to be sourced. Please run as '. $THIS_SCRIPT'"
    exit 1
fi

if [ -z "$TEMPLATECONF" ]; then
    THIS_SCRIPT_DIR=$(dirname "$THIS_SCRIPT")
    THIS_SCRIPT_DIR=$(readlink -f "$THIS_SCRIPT_DIR")

    if [ -d "$THIS_SCRIPT_DIR/meta-chromeos-distro/conf" ]; then
        TEMPLATECONF="$THIS_SCRIPT_DIR/meta-chromeos-distro/conf"
    elif [ -f "$THIS_SCRIPT_DIR/.templateconf" ]; then
        source $THIS_SCRIPT_DIR/.templateconf
    elif [ -d "$THIS_SCRIPT_DIR/.template" ]; then
        TEMPLATECONF="$THIS_SCRIPT_DIR/.template"
    fi
fi

if [ -z "$OEROOT" ]; then
    OEROOT=$(dirname "$THIS_SCRIPT")/../poky
    OEROOT=$(readlink -f "$OEROOT")
fi

export OEROOT

if [ -z "$BITBAKEDIR" ]; then
    BITBAKEDIR=$(dirname "$THIS_SCRIPT")/../poky/bitbake
    BITBAKEDIR=$(readlink -f "$BITBAKEDIR")
fi

export BITBAKEDIR

unset THIS_SCRIPT_DIR
unset THIS_SCRIPT

. $OEROOT/scripts/oe-buildenv-internal &&
    TEMPLATECONF="$TEMPLATECONF" $OEROOT/scripts/oe-setup-builddir || {
    unset OEROOT
    return 1
}
unset OEROOT

[ -z "$BUILDDIR" ] || cd "$BUILDDIR"

# Shutdown any bitbake server if the BBSERVER variable is not set
if [ -z "$BBSERVER" ] && [ -f bitbake.lock ]; then
    grep ":" bitbake.lock > /dev/null && BBSERVER=$(cat bitbake.lock) bitbake --status-only
    if [ $? = 0 ]; then
        echo "Shutting down bitbake memory resident server with bitbake -m"
        BBSERVER=$(cat bitbake.lock) bitbake -m
    fi
fi
